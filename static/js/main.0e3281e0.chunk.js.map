{"version":3,"sources":["components/Form/index.js","components/Table/index.js","pages/Singlepage/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","oneExpense","sum","handleInputChange","event","target","name","value","setState","handleFormSubmit","preventDefault","props","addExpense","addingBox","parseFloat","this","className","type","onChange","placeholder","onClick","Component","Table","scope","expenseList","map","expense","Singlepage","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sPA2DeA,E,4MAvDbC,MAAQ,CACNC,WAAY,EACZC,IAAK,G,EAGPC,kBAAoB,SAAAC,GAAS,MAEHA,EAAMC,OAAtBC,EAFmB,EAEnBA,KAAMC,EAFa,EAEbA,MAGd,EAAKC,SAAL,eACGF,EAAOC,K,EAIZE,iBAAmB,SAAAL,GAEjBA,EAAMM,iBAEN,EAAKC,MAAMC,WAAW,CAACL,MAAO,EAAKP,MAAMC,aAEzC,IAAIY,EAAY,EAAKb,MAAME,IAAMY,WAAW,EAAKd,MAAMC,YAEvD,EAAKO,SAAS,CAEZN,IAAKW,K,uDAWP,OACE,6BACE,qDACyBE,KAAKf,MAAME,KAEpC,0BAAMc,UAAU,QACd,2BACEC,KAAK,SACLV,MAAOQ,KAAKf,MAAMC,WAClBK,KAAK,aACLY,SAAUH,KAAKZ,kBACfgB,YAAY,uBAEd,4BAAQC,QAASL,KAAKN,kBAAtB,gB,GAnDSY,aCoBJC,E,uKAjBX,OACI,2BAAON,UAAU,4CACf,2BAAOA,UAAU,eACf,4BACE,wBAAIO,MAAM,OAAV,qBAGJ,+BACGR,KAAKJ,MAAMa,YAAYC,KAAI,SAAAC,GAAO,OACjC,4BAAKA,EAAQnB,gB,GAZPc,aCoCLM,E,4MAhCb3B,MAAQ,CACNwB,YAAa,I,EAGfZ,WAAa,SAACc,GACZ,EAAKlB,SAAS,CAAEgB,YAAY,GAAD,mBAAK,EAAKxB,MAAMwB,aAAhB,CAA6BE,O,uDAOxD,OADAE,QAAQC,IAAId,KAAKf,MAAMwB,aAErB,oCACE,yBAAKR,UAAU,mBAEb,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,wBACA,uBAAGA,UAAU,QAAb,6CAKJ,kBAAC,EAAD,CAAMJ,WAAYG,KAAKH,aACvB,kBAAC,EAAD,CAAOY,YAAaT,KAAKf,MAAMwB,oB,GA3BhBH,a,MCSVS,MARf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,QCIce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.0e3281e0.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\n\r\nclass Form extends Component {\r\n  // Setting the component's initial state\r\n  state = {\r\n    oneExpense: 0,\r\n    sum: 0,\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    // Getting the value and name of the input which triggered the change\r\n    const { name, value } = event.target;\r\n\r\n    // Updating the input's state\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = event => {\r\n    // Preventing the default behavior of the form submit (which is to refresh the page)\r\n    event.preventDefault();\r\n    // console.log(event.target.value);\r\n    this.props.addExpense({value: this.state.oneExpense});\r\n    // let expenseArray = this.state.expenses;\r\n    let addingBox = this.state.sum + parseFloat(this.state.oneExpense);\r\n    // expenseArray.push(this.state.oneExpense)\r\n    this.setState({\r\n    //   expenses: expenseArray,\r\n      sum: addingBox\r\n    });\r\n\r\n    // console.log(this.state.oneExpense, this.state.sum, this.state.expenses);\r\n\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    // console.log(this.state.oneExpense, this.state.sum, this.state.expenses);\r\n    return (\r\n      <div>\r\n        <p>\r\n         Sum Total of Expenses: {this.state.sum}\r\n        </p>\r\n        <form className=\"form\">\r\n          <input\r\n            type=\"number\"\r\n            value={this.state.oneExpense}\r\n            name=\"oneExpense\"\r\n            onChange={this.handleInputChange}\r\n            placeholder=\"enter your expense\"\r\n          />\r\n          <button onClick={this.handleFormSubmit}>Submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Form;","import React, { Component } from \"react\";\r\n\r\nclass Table extends Component {\r\n\r\n  render() {\r\n    return (\r\n        <table className=\"table table-hover table-striped table-sm\">\r\n          <thead className=\"thead-light\">\r\n            <tr>\r\n              <th scope=\"col\">Expense History</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.expenseList.map(expense => (\r\n              <tr>{expense.value}</tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n    )\r\n  }\r\n};\r\nexport default Table;","import React, { Component } from \"react\";\r\nimport Form from \"../../components/Form\"\r\nimport Table from \"../../components/Table\"\r\n\r\nclass Singlepage extends Component {\r\n\r\n  state = {\r\n    expenseList: []\r\n  }\r\n\r\n  addExpense = (expense) => {\r\n    this.setState({ expenseList:[...this.state.expenseList, expense] })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    console.log(this.state.expenseList)\r\n    return (\r\n      <>\r\n        <div className=\"container-fluid\">\r\n\r\n          <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n              <h1 className=\"display-4\">React Budget Tracker</h1>\r\n              <p className=\"lead\">A reflection of your spending habits...</p>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <Form addExpense={this.addExpense}/>\r\n          <Table expenseList={this.state.expenseList} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n};\r\n\r\nexport default Singlepage;","import React from 'react';\nimport Singlepage from \"./pages/Singlepage\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Singlepage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}